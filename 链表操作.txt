package com.nchu.LinkedList;

/**
* Description: 
*  1）单链表的插入、删除、查找操作；
*  2）链表中存储的是int类型的数据；
* @param 
* @author James
* @date 2018年10月29日 下午7:46:55
*/
public class SinglyLinkedList {

	
	private Node head =null;
	
	//查找等于给定值的节点
	public Node findByValue(int value){
			
		Node p = head;
		if(p!=null&&p.data!=value){
			p = p.next;
		}
		return p;
	}
	
	
	//查找指定序号的节点
	public Node findByIndex(int index){
		
		Node p = head;
		int pos = 0;
		while(p!=null&&pos!=index){
			p = p.next;
			++pos;
		}
		return p;
	}
	
	//无头结点，表头部插入，链表的输出顺序与输入的相反
	public void insertToHead(int value){
		Node newNode = new Node(value, null);
		insertToHead(newNode);
	}
	
	public void insertToHead(Node newNode){
		if(head==null){
			head = newNode;
		}else{
			newNode.next = head;
			head = newNode;
		}
	}
	
	public static class Node{
		private int data;
		private Node next;
		//构造方法
		public Node(int data,Node next){
			this.data = data;
			this.next = next;
		}
		
		public int getData(){
			return data;
		}
			
	}
	
	//顺序插入
    //链表尾部插入
	public void insertTail(int value){
		Node newNode = new Node(value, null);
		if(head==null){
			head = newNode;
		}else{
			Node q = head;
			while(q.next!=null){
				q = q.next;
			}
			newNode.next = q.next;
			q.next = newNode;
		}
	}
	
	//在某个节点后插入一个新的节点
	public void insertAfter(Node p,int value){
		Node newNode = new Node(value, null);
		insertAfter(p, newNode);
	}
	
	private void insertAfter(Node p, Node newNode) {
		if(p==null) return;
		newNode.next = p.next;
		p.next = newNode;
	}
	
	//在某个节点前插入新节点
	 public void insertBefore(Node p, int value) {
	        Node newNode = new Node(value, null);
	        insertBefore(p, newNode);
	    }


	private void insertBefore(Node p, Node newNode) {
		
		if(p==null) return;
		if (head == p) {
            insertToHead(newNode);
            return;
        }
		
		Node q = head;
		while (q != null && q.next != p) {
            q = q.next;
        }

        if (q == null) {
            return;
        }

        newNode.next = p;
        q.next = newNode;		
	}

	//删除某一个节点
	public void deleteByNode(Node p){
		if (p == null || head == null) return;
		if (p == head) {
            head = head.next;
            return;
        }

        Node q = head;
        while (q != null && q.next != p) {
            q = q.next;
        }

        if (q == null) {
            return;
        }

        q.next = q.next.next;
	}

	//打印链表元素
	public void printAll() {
        Node p = head;
        while (p != null) {
            System.out.print(p.data + " ");
            p = p.next;
        }
        System.out.println();
    }
	
	public static void main(String[] args) {
		SinglyLinkedList link = new SinglyLinkedList();
		
		int data[] = {1,2,3,4,5};
		
		for(int i=0;i<data.length;i++){
			link.insertToHead(data[i]);
		}
		link.printAll();
	}
}
