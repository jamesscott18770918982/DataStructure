package com.nchu.array;


/**
* Description:数组中的相关操作
* @param 
* @author James
* @date 2018年12月2日 下午7:49:47
*/
public class Array {

	public int data[];
	
	//数组长度
	public int n;
	//数组中实际存储元素的个数
	public int count;
	
	//构造方法
	public Array(int capacity){
		this.data = new int[capacity];
		this.n = capacity;
		this.count = 0;
	}
	
	//插入元素
	public boolean insert(int index,int value){
		
		//如果数组已满，无法插入新的元素
		if(count==n){
			System.out.println("数组已满，无法插入新的元素！");
			return false;
		}
		
		//如果数组未满
		//插入的位置不合法
		if(index<0||index>=n) {
			System.out.println("插入的位置不合法！无法插入新元素！");
			return false;
		}
		for(int i=count;i>index;--i){
			data[i] = data[i-1];
		}
		data[index] = value;
		++count;
		return true;
	}
	
	//删除元素
	public boolean delete(int index){
		
		//删除的位置不合法
		if(index<0||index>=count) return false;
		
		for(int i = index+1;i<count;++i){
			data[i-1] = data[i];
		}
		--count;
		return true;
		
	}
	
	public void printAll(){
		for(int i = 0;i<count;++i){
			System.out.print(data[i]+" ");
		}
	}
	
	public static void main(String[] args) {
		Array a = new Array(8);
		a.insert(0, 1);
		a.insert(1, 2);
		a.insert(2, 3);
		a.insert(3, 4);
		a.insert(4, 5);
		a.insert(5, 6);
		a.insert(6, 7);
		//a.printAll();
		a.delete(0);
		//a.printAll();
		a.insert(0, 12);
		//a.printAll();
		a.insert(7, 15);
		//a.printAll();
		a.insert(8, 10);
	}
}
